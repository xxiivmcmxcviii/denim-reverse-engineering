# -- Stages --

stages:
  - build
  - test
  # - deploy
  - clean

# -- Variables --

variables:
  GIT_DEPTH: 1 # Set git shallow clone to 1 commit.

# -- Jobs --

# Application building

building:
   stage: build
   only:
     - master # Restricts the building to the master branch.
     - develop # Restricts the building to the develop branch.
   script:
     - echo "--Building--"
     - npm install # Installs the dependencies.
     - npm run swagger # Generates the application documentation (Swagger).
     - Invoke-WebRequest -Uri "https://github.com/github/codeql-cli-binaries/releases/download/v2.13.0/codeql.zip" -OutFile "codeql.zip" # CodeQL CLI downloading.
     - '& ${env:ProgramFiles}\7-Zip\7z.exe x codeql.zip' # CodeQL CLI unzipping.
     - New-Item -Name "lib" -ItemType "directory" # Creates the lib directory.
     - Move-Item -Path codeql -Destination lib/codeql-cli # CodeQL CLI moving to right folder.
     - Invoke-WebRequest -Uri "https://github.com/github/codeql/archive/refs/heads/main.zip" -OutFile "main.zip" # CodeQL libraries downloading.
     - '& ${env:ProgramFiles}\7-Zip\7z.exe x main.zip' # CodeQL libraries unzipping.
     - Move-Item -Path codeql-main -Destination lib/codeql-lib # CodeQL CLI moving to right folder.
     - New-Item -Name ".env" -ItemType "file" # Creates the environment variables file.
     - New-Item -Name "TEMP" -ItemType "directory" # Creates the temporary working directory for analysis files.
     - Add-Content .env 'FILE_SYSTEM_SEPARATOR="\"' # Adds the file system separator environment variable for Windows.

 # Unit testing

unit-testing:
   stage: test
   only:
     - master # Restricts the unit testing to the master branch.
     - develop # Restricts the unit testing to the develop branch.
   variables:
     GIT_STRATEGY: none # Skips the 'git fetch'.
   script:
     - echo "--Unit testing--"
     - npm run test_unit # Starts the unit testing.

 # Integration testing

integration-testing:
   stage: test
   only:
     - master # Restricts the integration testing to the master branch.
     - develop # Restricts the unit testing to the develop branch.
   variables:
     GIT_STRATEGY: none # Skips the 'git fetch'.
   needs: [ unit-testing ]
   script:
     - echo "--Integration testing--"
     - Set-Content .env 'FILE_SYSTEM_SEPARATOR="/"' # Sets the file system separator environment variable for Linux.
     - docker-compose up -d # Sets up and starts the docker container via docker-compose started in background.
     - npm run test_integration # Launches the integration testing.

# Application deployment

# deploying:
#   image: docker:latest
#   stage: deploy
#   only:
#     - master # Restricts the deployment only for the master branch.
#   services:
#     - docker:dind
#   script:
#     - echo "--Deploying--"
#     # TODO: Clean temporary directory content, unused zip files, ...
#     - docker build -t <host>:<port>/<image name>:latest .
#     - docker push <host>:<port>/<image name>:latest

# cleaning

cleaning:
  image: docker:latest
  stage: clean
  only:
    - master # Restricts the cleaning to the master branch.
    - develop # Restricts the cleaning to the develop branch.
  variables:
    GIT_STRATEGY: none # Skips the 'git fetch'.
  script:
    - echo "--Cleaning Docker & $CI_PROJECT_DIR--"
    - docker rm -f $(docker ps -a -q) # Removes ALL the Docker containers on the host machine runner.
    - docker rmi $(docker images -a -q) # Removes ALL the images on the host machine runner.
    - New-Item -Path ../ -Name "empty" -ItemType "directory" # Creates an empty folder for file deletion.
    - robocopy ../empty ./ /MIR; if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null } # Removes ALL the source files on the host machine runner.